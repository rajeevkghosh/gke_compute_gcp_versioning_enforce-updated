#This policy uses the Sentinel tfplan/v2 import to require that
# all GCE compute instances have all mandatory labels

# Note that the comparison is case-sensitive but also that GCE labels are only
# allowed to contain lowercase letters, numbers, hypens, and underscores.

# Import tfplan-functions.sentinel
# with alias "plan"
import "tfplan/v2" as tfplan
import "tfplan-functions" as plan
import "strings"
import "types"

# Get all GKE Instances
allGkeInstances = plan.find_resources("google_container_cluster")

violations_release_channel = {}
for allGkeInstances as address, rc {

	#release_channel = plan.evaluate_attribute(rc.change.after.release_channel[0],"channel")
	release_channel = plan.evaluate_attribute(rc.change.after, "release_channel")
	# print(release_channel[0]["channel"])
	print(release_channel)

	isnull_release_channel = rule { types.type_of(release_channel) == "null" }
	print(isnull_release_channel)
	if isnull_release_channel {
		#print("release_channel can't be null")
        print("The value for  " + address + " Can't be Null ")
		violations_release_channel[address] = rc

	} else {

		if not (release_channel[0]["channel"] == "STABLE") {
			#print("Only STABLE option is permissible for Release Channel")
            print("The value for  " + address + " can only be STABLE")
			violations_release_channel[address] = rc

		}
	}
}

GCP_GKE_RELEASECHANNEL = rule { length(violations_release_channel) is 0 }

#######-----------------------------------------------------------##############
#######-----------------------------------------------------------##############

violations_dataplane = {}
for allGkeInstances as address, rc {

	dataplane = plan.evaluate_attribute(rc.change.after, "datapath_provider")
	isnull_dataplane = rule { types.type_of(dataplane) == "null" }
	print("Dataplane: " + plan.to_string(isnull_dataplane))

	if isnull_dataplane {
		violations_dataplane[address] = rc
		#print("Dataplane value can't be Null")
        print("The value for  " + address + " Can't be Null ")

	} else {

		if not (dataplane == "ADVANCED_DATAPATH") {
			print("For Dataplane, only ADVANCED_DATAPATH value is supported")
			violations_dataplane[address] = rc
		}
	}

}

GCP_GKE_DATAPLANEV2 = rule { length(violations_dataplane) is 0 }

main = rule { GCP_GKE_RELEASECHANNEL and GCP_GKE_DATAPLANEV2 }
